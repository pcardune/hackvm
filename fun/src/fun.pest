WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }
identifier = @{(ASCII_ALPHA | "_")+ ~ ASCII_ALPHANUMERIC*}

bool = { "true" | "false" }
number = { ASCII_DIGIT+ }
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\""}
array = { "[" ~ (expr ~ ("," ~ expr)*)? ~ "]"}

unary_operator = {
  "!"
  | "~"
}
binary_operator = {
  "+"
  | "-"
  | "*"
  | "/"
  | "<="
  | "<"
  | ">="
  | ">"
  | "!="
  | "=="
}

reference = {
  identifier ~ ("." ~ identifier)*
}
call_expr = { reference ~ "(" ~ (expr ~ ("," ~ expr)*)? ~ ")"}
new_expr = { "new" ~ call_expr }
term = {
  number
  | bool
  | string
  | array
  | new_expr
  | call_expr
  | reference
  | ("(" ~ expr ~ ")")
}
expr = {
  term ~ (binary_operator ~ term)*
}
// TYPES
type_ref = ${
  identifier ~ "[]"?
}
typed_identifier = {
  identifier ~ ":" ~ type_ref
}

// PARAMETERS
parameter_decl = {
  "(" ~
  (typed_identifier ~ ("," ~ typed_identifier)*)? ~
  ")"
}

block = { "{" ~ statement* ~ "}"}

// STATEMENTS
let_statement = { "let " ~ typed_identifier ~ "=" ~ expr ~ ";" }
while_statement = { "while" ~ "(" ~ expr ~ ")" ~ block }
return_statement = { "return " ~ expr ~ ";" }
assignment_statement = { reference ~ "=" ~ expr ~ ";"}
expr_statement = { expr ~ ";"}
statement = {
  let_statement
  | while_statement
  | return_statement
  | assignment_statement
  | expr_statement
}

constructor_decl = { "constructor" ~ parameter_decl ~ block }
class_field = { typed_identifier ~ ";"}
class_method = {
  identifier ~ parameter_decl ~ ":" ~ type_ref ~ block
}
static_method = {
  "static" ~ class_method
}
class_decl = {
  "class" ~ identifier ~ "{" ~
  static_method* ~
  class_field* ~
  constructor_decl? ~
  class_method* ~
  "}"
}
file = {
  SOI ~
  class_decl* ~
  EOI
}